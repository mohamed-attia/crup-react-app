{"version":3,"sources":["components/Courseform.js","components/CourseList.js","App.js","serviceWorker.js","index.js"],"names":["CourseForm","props","onSubmit","addCourse","type","value","current","onChange","updatecourse","emptycourse","CourseList","state","isEdit","renderCourses","details","name","onClick","deleteCourse","index","toggleState","setState","updateCourseItem","e","preventDefault","editCourse","input","renderUpdateForm","ref","v","defaultValue","this","Fragment","Component","App","courses","target","splice","push","courseList","map","course","key","className","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNAYeA,EAVI,SAACC,GAClB,OACI,0BAAMC,SAAUD,EAAME,WAClB,2BAAOC,KAAK,OAAOC,MAAOJ,EAAMK,QAASC,SAAUN,EAAMO,eACzD,4BAAQJ,KAAK,UAAb,cACA,8BAAOH,EAAMQ,eC2CRC,E,2MA/CXC,MAAS,CACLC,QAAO,G,EAGXC,cAAgB,WACZ,OACE,4BACE,8BAAO,EAAKZ,MAAMa,QAAQC,MAC1B,4BAAQC,QAAS,WAAM,EAAKf,MAAMgB,aAAa,EAAKhB,MAAMiB,SAA1D,UACA,4BAAQF,QAAS,WAAM,EAAKG,YAAY,EAAKlB,MAAMiB,SAAnD,U,EAMRC,YAAc,WAAK,IACVP,EAAU,EAAKD,MAAfC,OACL,EAAKQ,SAAS,CACVR,QAAUA,K,EAIlBS,iBAAmB,SAACC,GAChBA,EAAEC,iBACF,EAAKtB,MAAMuB,WAAW,EAAKvB,MAAMiB,MAAO,EAAKO,MAAMpB,OACnD,EAAKc,e,EAITO,iBAAmB,WACf,OACI,0BAAMxB,SAAU,EAAKmB,kBACjB,2BAAOjB,KAAK,OAAOuB,IAAK,SAACC,GAAM,EAAKH,MAAQG,GAAIC,aAAc,EAAK5B,MAAMa,QAAQC,OACjF,mD,wEAKJ,IACHH,EAAUkB,KAAKnB,MAAfC,OACL,OACA,kBAAC,IAAMmB,SAAP,KACKnB,EAASkB,KAAKJ,mBAAqBI,KAAKjB,qB,GA5CxBmB,aCsEVC,E,2MAnEbtB,MAAQ,CACNuB,QAAQ,CACN,CAACnB,KAAK,QACN,CAACA,KAAK,OACN,CAACA,KAAK,WAERT,QAAQ,GACRG,YAAY,I,EAGdD,aAAe,SAACc,GACd,EAAKF,SAAS,CACZd,QAASgB,EAAEa,OAAO9B,S,EAItBY,aAAe,SAACC,GACd,IAAIgB,EAAU,EAAKvB,MAAMuB,QACzBA,EAAQE,OAAOlB,EAAO,GACtB,EAAKE,SAAS,CACZc,a,EAIJV,WAAa,SAACN,EAAOb,GAAS,IACvB6B,EAAW,EAAKvB,MAAhBuB,QACQA,EAAQhB,GACf,KAAWb,EACjB,EAAKe,SAAS,CACZc,a,EAIJ/B,UAAY,SAACmB,GACXA,EAAEC,iBACF,IAAIjB,EAAU,EAAKK,MAAML,QACrB4B,EAAU,EAAKvB,MAAMuB,QAEtB5B,GACD4B,EAAQG,KAAK,CAACtB,KAAKT,IACnB,EAAKc,SAAS,CACZc,UACA5B,QAAQ,GACRG,YAAa,MAGf,EAAKW,SAAS,CACZX,YAAa,8B,wEAIT,IAAD,OACAyB,EAAWJ,KAAKnB,MAAhBuB,QACDI,EAAaJ,EAAQK,KAAI,SAACC,EAAQtB,GACtC,OAAO,kBAAC,EAAD,CAAYM,WAAY,EAAKA,WAAYP,aAAc,EAAKA,aAAcC,MAAOA,EAAOJ,QAAW0B,EAAQC,IAAKvB,OAEzH,OACE,6BAASwB,UAAU,OACjB,0CACA,kBAAC,EAAD,CAAYjC,YAAeqB,KAAKnB,MAAMF,YAAaD,aAAgBsB,KAAKtB,aAAcF,QAASwB,KAAKnB,MAAML,QAASH,UAAa2B,KAAK3B,YACrI,4BAAK+B,EAAQS,OAAS,EAAI,GAAI,cAC9B,4BAAKL,Q,GA9DKN,aCSEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.860103f0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst CourseForm = (props) => {\r\n  return (\r\n      <form onSubmit={props.addCourse}>\r\n          <input type=\"text\" value={props.current} onChange={props.updatecourse}/>\r\n          <button type=\"submit\" >Add Course</button>\r\n          <span>{props.emptycourse}</span>\r\n      </form>\r\n  );\r\n};\r\n\r\nexport default CourseForm;\r\n","import React, { Component } from \"react\";\r\nclass CourseList extends Component {\r\n\r\n    state  = {\r\n        isEdit:false\r\n    }\r\n\r\n    renderCourses = ()=>{\r\n        return (\r\n          <li>\r\n            <span>{this.props.details.name}</span>\r\n            <button onClick={()=> {this.props.deleteCourse(this.props.index)}}>Delete</button>\r\n            <button onClick={()=> {this.toggleState(this.props.index)}}>Edit</button>\r\n          </li>\r\n        )\r\n    }\r\n\r\n    //toggel state\r\n    toggleState = ()=>{\r\n        let {isEdit} = this.state;\r\n        this.setState({\r\n            isEdit : !isEdit\r\n        })\r\n    }\r\n\r\n    updateCourseItem = (e)=>{\r\n        e.preventDefault();\r\n        this.props.editCourse(this.props.index, this.input.value );\r\n        this.toggleState()\r\n    }\r\n\r\n    // render form update\r\n    renderUpdateForm = ()=>{\r\n        return(\r\n            <form onSubmit={this.updateCourseItem}>\r\n                <input type=\"text\" ref={(v)=> {this.input = v}} defaultValue={this.props.details.name}/>\r\n                <button>Update Course</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\n  render() {\r\n    let {isEdit} = this.state;\r\n    return(\r\n    <React.Fragment>\r\n        {isEdit ? this.renderUpdateForm() : this.renderCourses()}\r\n    </React.Fragment>)\r\n  }\r\n}\r\n\r\nexport default CourseList;\r\n","import React, { Component } from \"react\";\nimport CourseForm from './components/Courseform';\nimport CourseList from './components/CourseList';\nclass App extends Component {\n  state = {\n    courses:[\n      {name:\"HTML\"},\n      {name:\"CSS\"},\n      {name:\"JQuery\"},\n    ],\n    current:'',\n    emptycourse:''\n  }\n\n  updatecourse = (e)=>{\n    this.setState({\n      current: e.target.value\n    })\n  }\n\n  deleteCourse = (index)=>{\n    let courses = this.state.courses;\n    courses.splice(index, 1);\n    this.setState({\n      courses\n    })\n  }\n\n  editCourse = (index, value)=>{\n    let {courses} = this.state;\n    let course = courses[index];\n    course['name'] = value;\n    this.setState({\n      courses\n    })\n  }\n\n  addCourse = (e)=>{\n    e.preventDefault();\n    let current = this.state.current;\n    let courses = this.state.courses;\n    debugger\n    if(current) {\n      courses.push({name:current});\n      this.setState({\n        courses,\n        current:'',\n        emptycourse: ''\n      })\n    }else {\n      this.setState({\n        emptycourse: 'Please Enter Course Name'\n      })\n    }\n  }\n  render() {\n    const {courses} = this.state;\n    const courseList = courses.map((course, index)=>{\n      return <CourseList editCourse={this.editCourse} deleteCourse={this.deleteCourse} index={index} details = {course} key={index}/>\n    })\n    return (\n      <section className=\"App\">\n        <h2>Add Course</h2>\n        <CourseForm emptycourse = {this.state.emptycourse} updatecourse = {this.updatecourse} current={this.state.current} addCourse = {this.addCourse} />\n        <h3>{courses.length > 0 ? '': 'No Courses'}</h3>\n        <ul>{courseList}</ul>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}